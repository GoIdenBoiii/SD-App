import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import glob
import os
import joblib


# Initialize a dictionary to store data for each person
person_data = {}

# List all data files (assuming each file is for a different person)
file_paths = glob.glob('path/to/your/files/*.txt')  # Update path to your files

for file_path in file_paths:
    # Extract person_id from the filename (e.g., "user_1.txt" -> person_id=1)
    person_id = os.path.basename(file_path).replace('.txt', '')
    
    # Load the data into a DataFrame
    df = pd.read_csv(
        file_path, 
        sep='\t', 
        header=None, 
        names=['date', 'time', 'code', 'value']
    )
    
    # Convert date and time to datetime
    df['datetime'] = pd.to_datetime(df['date'] + ' ' + df['time'], errors='coerce')
    df.drop(columns=['date', 'time'], inplace=True)
    
    # Filter for blood glucose measurements (codes 48, 57-64)
    glucose_codes = [48, 57, 58, 59, 60, 61, 62, 63, 64]
    glucose_df = df[df['code'].isin(glucose_codes)].copy()
    
    # Sort by datetime and reset index
    glucose_df.sort_values(by='datetime', inplace=True)
    glucose_df.reset_index(drop=True, inplace=True)
    
    # Store in the dictionary
    person_data[person_id] = glucose_df


# Feature engineering for each person
for person_id, df in person_data.items():
    # Time-based features
    df['hour'] = df['datetime'].dt.hour
    df['day_of_week'] = df['datetime'].dt.dayofweek  # Monday=0, Sunday=6
    df['month'] = df['datetime'].dt.month
    
    # Time since last measurement (in minutes)
    df['time_since_last'] = df['datetime'].diff().dt.total_seconds() / 60
    df['time_since_last'].fillna(0, inplace=True)  # First row has no previous measurement
    
    # Previous glucose value
    df['previous_glucose'] = df['value'].shift(1)
    df.dropna(inplace=True)  # Drop rows with NaN (first row)


# Combine all data into a single DataFrame
all_data = pd.concat(person_data.values(), ignore_index=True)

# Define features (X) and target (y)
X = all_data[['hour', 'day_of_week', 'month', 'time_since_last', 'previous_glucose']]
y = all_data['value']

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Initialize and train the model
model = RandomForestRegressor(
    n_estimators=100,  # Number of trees
    random_state=42     # For reproducibility
)
model.fit(X_train, y_train)

# Save the model to a file
joblib.dump(model, 'blood_sugar_predictor.pkl')


# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate performance metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"RÂ² Score: {r2:.2f}")